from flask import Blueprint, render_template, request, redirect,  flash
import os
import yara
import requests
from werkzeug.utils import secure_filename
import base64
import json

web = Blueprint('web', __name__)
UPLOAD_FOLDER = 'uploaded/'

ALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'exe','ini','conf','html','htm','css','js','json','xml','yara','yml',
                      'sh', '', '*'}

API_KEY = '28d06b49ae9a7e7e25150dde365de2e20522f4915e246fbfc2b9fb7b44aedd12'

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


@web.route('/')
def index():
    return render_template('index.html')


@web.route('/match', methods=['GET', 'POST'])
def match():
    if request.method == 'GET':
        return render_template('match.html')
    elif request.method == 'POST':
        if 'file' not in request.files:
            flash('No file part')
            return redirect(request.url)
        file = request.files['file']
        if file.filename == '':
            print("nofilename")
            flash('No selected file')
            return redirect(request.url)
        if file :
            filename = secure_filename(file.filename)
            filepath = os.path.join(UPLOAD_FOLDER, filename)
            file.save(filepath)
            loadedrules = yara.load('yaraoyara/loaded.bin')
            result = loadedrules.match(filepath)
            with open('data.json', 'r') as f:
                rules = json.load(f)
            data = []
            for r in result:
                if r.rule in rules:
                    data.append({"name":r.rule,"description":r.meta.get("description")})
            os.remove(filepath)
            if not data:
                data.append("CLEAN")
            return render_template('results.html' ,result=data)
        else:
            render_template('index.html')
            flash("Format not suported")

        return render_template('index.html')


@web.route('/results')
def results():
    tresult = request.args.getlist('tresult')
    return render_template('results.html', result=tresult)

def scan_url(url):
    """
    Scan a URL using the VirusTotal API.
    """
    params = {'url': url}
    headers = {
        "accept": "application/json",
        "x-apikey": API_KEY,
        "content-type": "application/x-www-form-urlencoded"
    } 
    response = requests.post("https://www.virustotal.com/api/v3/urls", params=params, headers=headers)
    if response.status_code == 200:
        json_response = response.json()
        return json_response
    else:
        raise Exception('Error scanning URL: ' + response.text)
    
def get_url_report(url):
    """
    Get a URL Report using url.
    """
    headers = {
        "accept": "application/json",
        "x-apikey": API_KEY,
    }
    url_id = base64.urlsafe_b64encode(url.encode()).decode().strip("=")
    response = requests.get(f"https://www.virustotal.com/api/v3/urls/{url_id}", headers=headers)
    if response.status_code == 200:
        json_response = response.json()
        return json_response
    else:
        raise Exception('Error getting report: ' + response.text)
    


@web.route('/url_scan', methods=['GET', 'POST'])
def url_scan():
    if request.method == 'GET':
        return render_template('url_scan.html')
    elif request.method == 'POST':
        url = request.form["url"]
        scan_url(url)
        report_data = get_url_report(url)
        last_analysis_results = report_data["data"]["attributes"]["last_analysis_results"]
        last_analysis_stats = report_data["data"]["attributes"]["last_analysis_stats"]
        results = []
        for v in last_analysis_results.values():
            results.append({"name":v["engine_name"],"category":v["category"],"result":v["result"]})
        results.sort(key=lambda x: {'malicious': 1, 'suspicious': 2, 'harmless': 3,'timeout':4 ,'undetected': 5}[x['category']])
        return render_template('url_report.html',website_url=url,stats=last_analysis_stats, result=report_data, result_list=results)